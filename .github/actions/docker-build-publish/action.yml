name: "Docker Build and Publish"
description: "Build and publish a Docker image using raw Docker commands"

inputs:
  working-directory:
    description: "Path to the directory containing Dockerfile and source code"
    required: true
  dockerfile-path:
    description: "Relative path to the Dockerfile (from working directory)"
    required: true
  docker-registry:
    description: "Docker registry (e.g. docker.io, ghcr.io)"
    required: true
  docker-repository:
    description: "Docker repository (e.g. samibister)"
    required: true
  docker-image-name:
    description: "Name of the Docker image (e.g., myorg/myimage)"
    required: true
  docker-tag:
    description: "Docker image tag (e.g., latest, 1.0.0, commit-SHA)"
    required: true
  docker-user:
    description: "Docker username"
    required: true
  docker-password:
    description: "Docker password or token"
    required: true
  cosign-key:
    description: "Cosign priavate key"
    required: true
  cosign-password:
    description: "Cosign passpharse"
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run Docker Build
      shell: bash
      run: |
        docker build -f ${{ inputs.dockerfile-path }} -t ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}-test .
      working-directory: ${{ inputs.working-directory }}

    - name: Generaate SBOM with Syft
      shell: bash
      run: |
        syft ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}-test -o json > sbom.json
      working-directory: ${{ inputs.working-directory }}

    - name: Run Security Scan with Grype
      shell: bash
      run: |
        grype sbom:sbom.json --only-fixed --fail-on high
      working-directory: ${{ inputs.working-directory }}



    - name: Docker Login
      shell: bash
      run: |
        echo "${{ inputs.docker-password }}" | docker login -u "${{ inputs.docker-user }}" --password-stdin "${{ inputs.docker-registry }}"

    # Docker hub does not recognize the attestations from other than Docker Build and publish step 
    # - name: Docker Push
    #   shell: bash
    #   run: |
    #     docker push ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}
    #   working-directory: ${{ inputs.working-directory }}

    # Docker hub does not recognize the attestations from other than Docker Build and publish step 
    # - name: Install Cosign
    #   uses: sigstore/cosign-installer@v3.7.0

    # - name: Install crane
    #   shell: bash
    #   run: |
    #     curl -sSL https://github.com/google/go-containerregistry/releases/latest/download/crane_linux_amd64 \
    #       -o /usr/local/bin/crane
    #     chmod +x /usr/local/bin/crane

    # Docker hub does not recognize the attestations from other than Docker Build and publish step
    # - name: Retrieve digest
    #   id: digest
    #   shell: bash
    #   run: |
    #     echo "digest=$(crane digest ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }})" >> $GITHUB_OUTPUT

    
    # Docker hub does not recognize the attestations from other than Docker Build and publish step
    # - name: Attest SBOM (key-based)
    #   env:
    #     COSIGN_PASSWORD: ${{ inputs.cosign-password }}
    #     COSIGN_KEY: ${{ inputs.cosign-key }}
    #     COSIGN_SKIP_CONFIRM: "true"
    #   shell: bash
    #   run: |
    #     # Decode the private key from base64 (if stored as base64 in GitHub Secrets)
    #         if echo "$COSIGN_KEY" | base64 -d > cosign.key 2>/dev/null; then
    #           echo "Successfully decoded base64 key"
    #         else
    #           echo "$COSIGN_KEY" > cosign.key
    #         fi
    #     # Attest the SBOM with the private key
    #     cosign attest \
    #       --predicate sbom.json \
    #       --key cosign.key \
    #       --yes \
    #       ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}
    # - name: Extract metadata
    #   id: meta
    #   uses: docker/metadata-action@v5
    #   with:
    #     images: ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}

    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.working-directory }}
        file: ${{ inputs.dockerfile-path }}
        build-args: |
          VERSION=${{ inputs.docker-tag }}
        sbom: true
        push: true
        tags: ${{ inputs.docker-registry }}/${{ inputs.docker-repository }}/${{ inputs.docker-image-name }}:${{ inputs.docker-tag }}

    - name: Docker Logout
      shell: bash
      run: |
        docker logout "${{ inputs.docker-registry }}"

    - name: Remove sbom.json
      shell: bash
      run: |
        rm sbom.json
      working-directory: ${{ inputs.working-directory }}


